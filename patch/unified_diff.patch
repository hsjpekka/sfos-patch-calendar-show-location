--- /usr/lib/qt5/qml/Sailfish/Calendar/CalendarEventView.qml
+++ /usr/lib/qt5/qml/Sailfish/Calendar/CalendarEventView.qml
@@ -3,7 +3,9 @@
 import Sailfish.TextLinking 1.0
 import org.nemomobile.calendar 1.0
 import Sailfish.Calendar 1.0 as Calendar
-import org.nemomobile.notifications 1.0 as SystemNotifications
+import org.nemomobile.notifications 1.0 as SystemNotifications
+import Nemo.Configuration 1.0 // patch calendar-show-location
+import Nemo.DBus 2.0 // patch calendar-show-location
 
 Column {
     id: root
@@ -18,6 +20,51 @@
         attendeeView.model = attendeeList
     }
 
+    // ==> patch calendar-show-location
+    ConfigurationValue {
+        id: showLocationUrl
+        key: "/apps/patchmanager/show-event-location/url"
+        defaultValue: ["http://maps.google.com/maps?f=q&q=", ""]
+    }
+
+    ConfigurationValue {
+        id: showLocationName
+        key: "/apps/patchmanager/show-event-location/name"
+        defaultValue: ["maps.google.com", "copy to clipboard"]
+    }
+
+    SystemNotifications.Notification {
+        id: notifier
+        icon: "icon-lock-calendar"
+        isTransient: true
+    }
+
+    DBusAdaptor {
+        id: dataBus
+        service: "my.location.service"
+        iface: "my.location.interface"
+        path: "/my/location/service"
+        bus: DBus.SessionBus
+        xml:  '<interface name="my.location.interface">\n' +
+              '    <method name="getDestinationAddress" />\n' +
+              '    <signal name="destinationChanged" />\n' +
+              '    <property name="destAddress" type="s" access="readwrite" />\n' +
+              '  </interface>\n'
+
+        property string destAddress: ""
+
+        function getDestinationAddress() {
+            return destAddress;
+        }        
+    }
+
+    function notifyAddressChange(addr) {
+        dataBus.destAddress = addr
+        dataBus.emitSignal("destinationChanged", [addr])
+        return
+    }
+    // <== patch calendar-show-location
+
     width: parent.width
     visible: root.event
     spacing: Theme.paddingMedium
@@ -151,10 +198,19 @@
         width: parent.width
         spacing: Theme.paddingMedium
 
-        Item {
+        // ==> patch calendar-show-location
+        ListModel {
+            id: showLocationModel
+            ListElement {
+                itemName: "shown name"
+                itemMethod: "related url"
+            }
+        }
+
+        ListItem {
             visible: root.event && root.event.location !== ""
             width: parent.width - 2*Theme.horizontalPageMargin
-            height: Math.max(locationIcon.height, locationText.height)
+            contentHeight: locationIcon.height > locationText.height ? locationIcon.height : locationText.height
             x: Theme.horizontalPageMargin
 
             Image {
@@ -164,17 +220,50 @@
 
             Label {
                 id: locationText
-
                 width: parent.width - locationIcon.width
                 height: contentHeight
                 x: locationIcon.width
                 anchors.top: lineCount > 1 ? parent.top : undefined
                 anchors.verticalCenter: lineCount > 1 ? undefined : locationIcon.verticalCenter
-                color: Theme.highlightColor
-                font.pixelSize: Theme.fontSizeSmall
+                color: Theme.primaryColor // ==> patch calendar-show-location // Theme.highlightColor
+                //font.pixelSize: Theme.fontSizeSmall // ==> patch calendar-show-location
                 wrapMode: Text.WordWrap
                 text: root.event ? root.event.location : ""
-            }
+            }
+
+            onClicked: {
+                var addr = locationText.text, query = showLocationUrl.value[0]
+                notifyAddressChange(addr)
+
+                if (query === "") {
+                    Clipboard.text = locationText.text
+                    notifier.previewBody = qsTr("location copied to clipboard")
+                    notifier.publish()
+                } else {
+                    Qt.openUrlExternally(query + encodeUriComponent(addr))
+                }
+            }
+            menu: ContextMenu {
+                Repeater {
+                    model: showLocationModel
+                    delegate: MenuItem {
+                        property string url: itemMethod
+                        text: itemName
+                        font.italic: index === 0
+                        onClicked: {
+                            notifyAddressChange(locationText.text)
+                            if (url === "") { // copy to Clipboard
+                                Clipboard.text = locationText.text
+                                notifier.previewBody = qsTr("location copied to clipboard")
+                                notifier.publish()
+                            } else {
+                                Qt.openUrlExternally(url + locationText.text)
+                            }
+                        }
+                    }
+                }
+            }
+            // <== patch calendar-show-location
         }
 
         Loader {
@@ -346,5 +435,19 @@
             targetUid: (root.event && root.event.calendarUid) ? root.event.calendarUid : ""
         }
     }
-}
-
+
+    // ==> patch calendar-show-location
+    Component.onCompleted: {
+        if (showLocationUrl.value.length !== undefined) {
+            var i = 0
+            showLocationModel.clear()
+            while (i < showLocationUrl.value.length) {
+                showLocationModel.append({"itemName": showLocationName.value[i], "itemMethod": showLocationUrl.value[i]})
+                i++
+            }
+        } else {
+            showLocationModel.append({"itemName": showLocationName.value, "itemMethod": showLocationUrl.value})
+        }
+    }
+    // <== patch calendar-show-location
+}
